API DOCUMENTATION

------------------------------
API URL Format
------------------------------
For the locally hosted database, the base URL is "localhost:3000/api" followed by the resource you are trying to access.

Each table in the database schema is considered a resource. The resoruces include:

/users
/products
/carts
/cart-items

Notes:
- Some routes may be restricted after auth is added.

------------------------------
Endpoints - General
------------------------------
GET /<resource>
- Returns the complete table for the requested resource.
- This may be used for any resource.

GET /<resource>/<resourceId>
- Returns the resource with the primary key (ID) in the request.
- This may be used for any resoruce EXCEPT cartItem, which has no primary key.

POST /<resource>
- Creates a new row for a given resource.
    * Carts and cartItems have special cases below.
- Accepts an object with all required fields (excluding primary key) in the request.
- Non-primary keys and IDs should be included in the request,
- Currently, cartItems are created and updated through /carts routes only.
- Certain keys (such as role flags for Users) can only be changed after creation.

PUT /<resource>/<resourceId>
- Updates the row for a given resource based on the primary key.
- Accepts an object with all required fields (excluding primary key) in the request.


------------------------------
Endpoints - User
------------------------------
GET /users/<userId>/cart
- Returns a cart for the given user ID number with cartStatus 'current'.
- For each user, there should only be one cart with cartStatus set to 'current' at a time.
- Also returns cartItems associated with the cart.

GET /users/<userId>/cart/history
- Returns all carts for the given user ID number.
- Effectively, this looks up the user's order history.
- Also returns the cartItems associated with each cart.

------------------------------
Endpoints - Cart
------------------------------

GET /carts/<cartId>/items
- Returns all cartItems associated with the cart ID number.

GET /carts/<userId>/cart
- Returns the user's first cart with cartStatus: 'current'.
- Also returns the cartItems associated with the cart.
- There should only ever be one cart per user with cartStatus: 'current'.

GET /carts/<userId>/history
- Returns all carts (with cartItems) belonging to the user.
- Essentially functions as the user's order history.

POST /carts
- Creates a new cart.
- Should be called AFTER checkout, with the previous cart's cartStatus changed from 'current'.
- Assigns 'current' cartStatus automatically.

PUT /carts/<cartId>
- Updates the data of a single cart ID.
- A cart's user never changes, so this is only used to update cartStatus.

---------------

POST /carts/item
- Creates a cartItem with the cartId, productId, and data included in the request.
- Should be called when the user add a new item (product) to their cart.
- The necessary keys (cartId and productId) go in the req.body.

PUT /carts/item
- Updates the cartItem with the cartId and productId included in req.body.

DELETE /carts/item
- Deletes the cartItem with the cartId and productId included in req.body.
- Responds with status 204 when successful.

DELETE /carts/item/<cartId>
- Deletes ALL cartItems with the matching cartId param.
- Used to clear a user's cart completely.
- Responds with status 204 when successful.
* TODO: needs validation to prevent carts for completed orders from being changed.

------------------------------
Endpoints - Product
------------------------------
No unique API routes yet.

------------------------------
Endpoints - CartItem
------------------------------
Depreciated; mostly merged into Cart routes.